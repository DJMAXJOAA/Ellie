@startuml

class PlayerController{
    + TicketMachine : ticketMachine

    - Update
    - FixedUpdate
    - Any Other Logics
}

PlayerController <-down- PlayerStatus
PlayerController <-down- PlayerAim
PlayerController <-down- PlayerQuest
PlayerController <-down- PlayerInteraction

@enduml


@startuml
class PlayerStateMachine{
    - states : Dictionary<PlayerStateName, PlayerBaseState>
    + CurrentState : PlayerBaseState
    + CurrentStateName : PlayerStateName

    + AddState(PlayerStateName stateName, PlayerBaseState state) : void
    + DeleteState(PlayerStateName stateName) : void
    + ChangeState(PlayerStateName nextStateName) : void
    + ChangeState(PlayerStateName nextStateName, StateInfo info) : void
    + UpdateState() : void
    + FixedUpdateState() : void
}

PlayerStateMachine o-down- PlayerBaseState
abstract class PlayerBaseState {
    # Controller: PlayerController

    + {abstract} OnEnterState() : void
    + OnEnterState(StateInfo info) : virtual void
    + {abstract} OnUpdateState() : void
    + {abstract} OnFixedUpdate() : void
    + {abstract} OnExitState() : void

}

PlayerBaseState <|-down- PlayerStateIdle
PlayerBaseState <|-down- PlayerStateWalk
PlayerBaseState <|-down- PlayerStateSprint


@enduml